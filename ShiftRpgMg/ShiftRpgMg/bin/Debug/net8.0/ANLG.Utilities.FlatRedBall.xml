<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ANLG.Utilities.FlatRedBall</name>
    </assembly>
    <members>
        <member name="P:ANLG.Utilities.FlatRedBall.Components.Component`2.Parent">
            <summary>
            The entity that this component resides on.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.Component`2.CustomInitialize">
            <summary>
            Gets called by the component list during <see cref="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.Initialize"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.Component`2.CustomActivity">
            <summary>
            Gets called by the component list during <see cref="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.Activity"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.Component`2.CustomDestroy">
            <summary>
            Gets called by the component list during <see cref="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.Destroy"/>
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Components.ComponentList">
            <summary>
            Stores components and allows the initialization, activity, and destroy methods to be called on each one in sequence.
            </summary>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Components.ComponentList.Components">
            <summary>
            The list of components this manages.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.HasComponent``1">
            <summary>
            Returns the first component in this list of type <typeparamref name="T"/> if it exists. If not, returns null.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.AddComponent``1(``0)">
            <summary>
            Adds the given component at the end of the list if it isn't already present.
              Returns null if the component was not added, like if it were already present.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.AddComponentBefore``2(``0)">
            <summary>
            Adds the given component to the list immediately before the other given component. Returns null if
              <paramref name="newComponent"/> already exists in the list or if <paramref name="existingComponent"/> doesn't.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.AddComponentAfter``2(``0)">
            <summary>
            Adds the given component to the list immediately after the other given component. Returns null if
              <paramref name="newComponent"/> already exists in the list or if <paramref name="existingComponent"/> doesn't.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.GetComponent``1">
            <summary>
            Gets the first component in this component list that is of the type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.GetComponents``1">
            <summary>
            Gets all components in this component list that are of the type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.RemoveComponent``1">
            <summary>
            Removes the given component from the list and returns the component if successful. Returns null if it's not found.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.ShiftComponent``1(System.Int32)">
            <summary>
            Shift an existing component up or down any number of spaces. Positive input shifts it later in the list,
              negative input shifts it earlier in the list. Input that would place the component below the range of valid
              indexes places it at the beginning instead. Input that would place it above the range puts it at the end.
              <br/>Returns false if no components were moved.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.Initialize">
            <summary>
            Calls <see cref="M:ANLG.Utilities.FlatRedBall.Components.IComponent.CustomInitialize"/> on each component in this list.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.Activity">
            <summary>
            Calls <see cref="M:ANLG.Utilities.FlatRedBall.Components.IComponent.CustomActivity"/> on each component in this list.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Components.ComponentList.Destroy">
            <summary>
            Calls <see cref="M:ANLG.Utilities.FlatRedBall.Components.IComponent.CustomDestroy"/> on each component in this list.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Components.IHasComponent`1">
            <summary>
            Denotes that an entity has a component of a given type. This interface is intended to be implemented
              by another interface like:
            <br/><c>IHasHealthComponent : IHasComponent&lt;HealthComponent&gt;</c>
            <br/>Then the entity gets <c>IHasHealthComponent</c>
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Constants.FourDirections">
            <summary>
            Basic directions for general use.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Constants.EightDirections">
            <summary>
            Eight-way directions for general use.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Constants.MathConstants">
            <summary>
            A collection of constants commonly used for mathematics and physics.
            </summary>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.GravityAcceleration">
            <summary>
            The approximate real-world acceleration due to gravity on Earth.
            </summary>
            <remarks>meters/(seconds^2)</remarks>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.GravitationalConstant">
            <summary>
            The real-world gravitational constant. It's the big G in Newton's Law of Universal Gravitation.
            </summary>
            <remarks>Newtons*meters^2/(kilograms^2)</remarks>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.AirDensity">
            <summary>
            The real-world density of air at sea level.
            </summary>
            <remarks>kilograms/(meters^3)</remarks>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.RotateCcw">
            <summary>
            Counter-clockwise rotation is represented by a positive value.
            </summary>
            <example><see cref="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.RotateCcw"/> * <see cref="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.QuarterTurn"/> is the value of a 90 degree counter-clockwise rotation in radians.</example>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.RotateCw">
            <summary>
            Clockwise rotation is represented by a negative value.
            </summary>
            <example><see cref="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.RotateCw"/> * <see cref="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.EighthTurn"/> is the value of a 45 degree clockwise rotation in radians.</example>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.NoRotation">
            <summary>
            Represents the absence of rotation.
            </summary>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.FullTurn">
            <summary>
            Represents a full 360-degree rotation in radians.
            </summary>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.ThreeQuartersTurn">
            <summary>
            Represents a 270-degree rotation in radians.
            </summary>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.HalfTurn">
            <summary>
            Represents a 180-degree rotation in radians.
            </summary>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.QuarterTurn">
            <summary>
            Represents a 90-degree rotation in radians.
            </summary>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Constants.MathConstants.EighthTurn">
            <summary>
            Represents a 45-degree rotation in radians.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2">
            <summary>
            An <see cref="T:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2"/> that automatically starts animation chains when each state is entered.
            </summary>
            <typeparam name="TEntity">The type of entity this controller is bound to. Is often your <c>Player</c> class.</typeparam>
            <typeparam name="TController">The base controller type for <typeparamref name="TEntity"/>. Is often your <c>PlayerController</c> class.</typeparam>
        </member>
        <member name="F:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.DefaultDuration">
            <summary> Seconds </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.#ctor(`0)">
            <inheritdoc cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.#ctor(`0)"/>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ChainList">
            <summary>
            The AnimationChainList that this controller's animation belongs to.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ChainName">
            <summary>
            The base name of the AnimationChain for this controller without a direction at the end like "Left" 
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.DefaultStateAfterTimeout">
            <summary>
            The state that the state machine will transition to when its animation times out if <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.CurrentStateAfterTimeout"/>
              is still null.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.AnimationDirection">
            <summary>
            The direction this entity is facing, for the purpose of choosing animations.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.AnimationDuration">
            <summary>
            The total duration of this controller's animation when your AnimationChain has been normalized.
              Only used if <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ScaleAnimationSpeedByDuration"/> is true.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.UseDirectionInChainName">
            <summary>
            Controls whether the current <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.AnimationDirection"/> is appended to the end of <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ChainName"/>.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ScaleAnimationSpeedByDuration">
            <summary>
            Controls whether the animation speed will be scaled with <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.AnimationDuration"/>. This assumes that
              your AnimationChain has a total duration of one second (is normalized).
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.PreviousAnimationDirection">
            <summary>
            The direction this entity was facing last frame.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.CurrentStateAfterTimeout">
            <summary>
            If non-null, the state that this controller will transition to once the current animation cycles.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ChainNameSeparator">
            <summary>
            Will be placed between the <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ChainName"/> and the <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.AnimationDirection"/> when getting the <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.CurrentChainName"/>.
              Defaults to <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ChangedDirection">
            <summary>
            Whether the direction the entity was facing is different from the previous frame.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ChainNameSuffix">
            <summary>
            The part at the end of the chain name with the direction, if applicable.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.CurrentChainName">
            <summary>
            The full AnimationChain name to provide to the Sprite.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.AnimationJustCycled">
            <summary>
            Passthrough property for Parent.SpriteInstance.JustCycled. Returns true if the current animation just finished a full cycle.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.AnimationSpeed">
            <summary>
            The speed multiplier for normalized animations. Only used when <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.ScaleAnimationSpeedByDuration"/> is true.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.Initialize">
            <inheritdoc cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.Initialize"/>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.OnActivate">
            <summary>
            AnimationController: Calls <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.BeginAnimation"/> by default.
            <br/><inheritdoc cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.OnActivate"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.CustomActivity">
            <inheritdoc cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.CustomActivity"/>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.EvaluateExitConditions">
            <summary>
            AnimationController: Checks if this controller's animation has cycled. If it has, returns either the <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.CurrentStateAfterTimeout"/>
              or <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.DefaultStateAfterTimeout"/>.
            <br/><inheritdoc cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.EvaluateExitConditions"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.BeforeDeactivate">
            <summary>
            AnimationController: Resets <see cref="P:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.CurrentStateAfterTimeout"/> to null.
            <br/><inheritdoc cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.BeforeDeactivate"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.BeginAnimation">
            <summary>
            Sets the animation chain for this controller.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.AnimationController`2.HandleDirectionChange">
            <summary>
            Restarts the animation if the entity direction changed this frame.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2">
            <summary>
            Stores the list 
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2.Controllers">
            <summary>
            All the controllers that belong to this collection (state machine)
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2.CurrentController">
            <summary>
            The currently active controller
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2.Add(`1)">
            <summary>
            Adds a controller to the collection.
            </summary>
            <exception cref="T:System.ArgumentException">Throws ArgumentException for duplicate types.</exception>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2.Get``1">
            <summary>
            Returns the controller in this collection with the type <typeparamref name="TSearch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the collection doesn't have a controller of the given type.</exception>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2.InitializeStartingController``1">
            <summary>
            Sets the current controller to the one of type <typeparamref name="TSearch"/> in this collection,
              then calls <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.OnActivate"/> on it.
              Must be called before any controller activity can happen.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2.DoCurrentControllerActivity">
            <summary>
            Evaluates the exit conditions of the current controller, then if a controller switch happens,
              <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.BeforeDeactivate"/> is called on the old controller,
              then <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.OnActivate"/> and <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.CustomActivity"/>
              are called on the new controller, in that order.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if collection is uninitialized.</exception>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2.OverrideState``1">
            <summary>
            Forces the state machine to move to the given state by replacing the next exit condition check.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2">
            <summary>
            Controllers are meant to be the only pathway through which input flows in an FRB entity. Very similar to the object-oriented state pattern:
              <a href="https://refactoring.guru/design-patterns/state">here</a>.
            </summary>
            <typeparam name="TEntity">The parent entity of this controller</typeparam>
            <typeparam name="TController">The controller type that is specific to your parent entity,
              usually the type of the class extending this one, like PlayerController, for example.</typeparam>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.Parent">
            <summary>
            Entity that this controller acts on
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.#ctor(`0)">
            <summary>Probably wanna call this in your <typeparamref name="TEntity"/>'s CustomInitialize.</summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.Get``1">
            <summary>
            Wrapper for <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2.Get``1"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.Initialize">
            <summary>
            Called once after all controllers have been constructed and added to the collection.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.OnActivate">
            <summary>
            Called once when this controller is set as the active controller
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.CustomActivity">
            <summary>
            Called each frame during the parent entity's CustomActivity
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.EvaluateExitConditions">
            <summary>
            Called before CustomActivity each frame. Should evaluate the current state of the entity and decide which
              controller should be moved to next. Returning null signals that no exit conditions have been fulfilled
              and the current state should be maintained. Returning <c>`this`</c> signals that the machine should
              transition out of the current state and then back into the current state. This action would trigger
              all the lifecycle hooks again.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.BeforeDeactivate">
            <summary>
            Called once before this controller is no longer the active controller. This happens after <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.EvaluateExitConditions"/>,
              but before the next state's <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.OnActivate"/>.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.IEntityController`2.Parent">
            <summary>
            Entity that this controller acts on
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.IEntityController`2.Get``1">
            <summary>
            Wrapper for <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.ControllerCollection`2.Get``1"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.IEntityController`2.Initialize">
            <summary>
            Called once after all controllers have been constructed and added to the collection.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.IEntityController`2.OnActivate">
            <summary>
            Called once when this controller is set as the active controller
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.IEntityController`2.CustomActivity">
            <summary>
            Called each frame during the parent entity's CustomActivity
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.IEntityController`2.EvaluateExitConditions">
            <summary>
            Called before CustomActivity each frame. Should evaluate the current state of the entity and decide which
              controller should be moved to next. Returning null signals that no exit conditions have been fulfilled
              and the current state should be maintained. Returning <c>`this`</c> signals that the machine should
              transition out of the current state and then back into the current state. This action would trigger
              all the lifecycle hooks again.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.IEntityController`2.BeforeDeactivate">
            <summary>
            Called once before this controller is no longer the active controller. This happens after <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.EvaluateExitConditions"/>,
              but before the next state's <see cref="M:ANLG.Utilities.FlatRedBall.Controllers.EntityController`2.OnActivate"/>.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Controllers.IHasAnimationControllers`2">
            <summary>
            Denotes that an entity is using a ControllerCollection with AnimationControllers. 
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.IHasAnimationControllers`2.ControllerSprite">
            <summary></summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Controllers.IHasControllers`2">
            <summary>
            Denotes that an entity is using a ControllerCollection. 
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.Controllers.IHasControllers`2.Controllers">
            <summary>
            Instantiate this during initialize along with all
              the controllers you need. You'll also wanna provide any inputs like <see cref="T:FlatRedBall.Input.IPressableInput"/> to your
              controllers at this time.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Controllers.MultispriteController`2.BeginAnimation">
            <summary>
            Sets the animation chain for this controller.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.States.IState`1.Parent">
            <summary>
            Entity that this state acts on
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IState.Initialize">
            <summary>
            Called once after all states have been constructed and added to the collection.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IState.OnActivate">
            <summary>
            Called once when this state is set as the active state
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IState.CustomActivity">
            <summary>
            Called each frame during the parent entity's CustomActivity
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IState.EvaluateExitConditions">
            <summary>
            Called before CustomActivity each frame. Should evaluate the current state of the entity and decide which
              state should be moved to next. Returning null signals that no exit conditions have been fulfilled
              and the current state should be maintained. Returning <c>`this`</c> signals that the machine should
              transition out of the current state and then back into the current state. This action would trigger
              all the lifecycle hooks again.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IState.BeforeDeactivate">
            <summary>
            Called once before this state is no longer the active state. This happens after <see cref="!:EntityController&lt;TEntity,TController&gt;.EvaluateExitConditions"/>,
              but before the next state's <see cref="!:EntityController&lt;TEntity,TController&gt;.OnActivate"/>.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IState.Uninitialize">
            <summary>
            Called once ever when the state has reached the end of its lifecycle
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IStateMachine.Add(ANLG.Utilities.FlatRedBall.States.IState)">
            <summary>
            Adds a state to the collection.
            </summary>
            <exception cref="T:System.ArgumentException">Throws ArgumentException for duplicate types.</exception>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IStateMachine.InitializeStartingState``1(System.Boolean)">
            <summary>
            Sets the current state to the one of type <typeparamref name="TSearch"/> in this collection,
              then calls <see cref="!:EntityState&lt;T,TSelf&gt;.OnActivate"/> on it.
              Must be called before any state activity can happen.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IStateMachine.DoCurrentStateActivity">
            <summary>
            Evaluates the exit conditions of the current state, then if a state switch happens,
              <see cref="!:EntityState&lt;T,TSelf&gt;.BeforeDeactivate"/> is called on the old state,
              then <see cref="!:EntityState&lt;T,TSelf&gt;.OnActivate"/> and <see cref="!:EntityState&lt;T,TSelf&gt;.CustomActivity"/>
              are called on the new state, in that order.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if collection is uninitialized.</exception>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IStateMachine.OverrideState``1(System.Boolean)">
            <summary>
            Forces the state machine to move to the given state by replacing the next exit condition check.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IStateMachine.Uninitialize">
            <summary>
            Uninitializes all the states in the collection so this state machine can be safely destroyed
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.IReadonlyStateMachine.Get``1(System.Boolean)">
            <summary>
            Returns the state in this collection with the exact type <typeparamref name="TSearch"/>.
            Returns the first state in this collection whose type is assignable to <typeparamref name="TSearch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the collection doesn't have a state of the given type.</exception>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.States.State`1">
            <summary>
            States are meant to be the only pathway through which input flows in an FRB entity. Very similar to the object-oriented state pattern:
              <a href="https://refactoring.guru/design-patterns/state">here</a>.
            </summary>
            <typeparam name="T">The parent entity of this state</typeparam>
            <typeparam name="TState">The state type that is specific to your parent entity,
              usually the type of the class extending this one, like PlayerState, for example.</typeparam>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.States.StateMachine">
            <summary>
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.States.StateMachine.States">
            <summary>
            All the states that belong to this collection (state machine)
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.States.StateMachine.CurrentState">
            <summary>
            The currently active state
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.StateMachine.Add(ANLG.Utilities.FlatRedBall.States.IState)">
            <summary>
            Adds a state to the collection.
            </summary>
            <exception cref="T:System.ArgumentException">Throws ArgumentException for duplicate types.</exception>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.StateMachine.InitializeStartingState``1(System.Boolean)">
            <summary>
            Sets the current state to the one of type <typeparamref name="TSearch"/> in this collection,
              then calls <see cref="!:EntityState&lt;T,TSelf&gt;.OnActivate"/> on it.
              Must be called before any state activity can happen.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.StateMachine.DoCurrentStateActivity">
            <summary>
            Evaluates the exit conditions of the current state, then if a state switch happens,
              <see cref="!:EntityState&lt;T,TSelf&gt;.BeforeDeactivate"/> is called on the old state,
              then <see cref="!:EntityState&lt;T,TSelf&gt;.OnActivate"/> and <see cref="!:EntityState&lt;T,TSelf&gt;.CustomActivity"/>
              are called on the new state, in that order.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if collection is uninitialized.</exception>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.States.StateMachine.OverrideState``1(System.Boolean)">
            <summary>
            Forces the state machine to move to the given state by replacing the next exit condition check.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.CameraExtensions">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.CameraExtensions.AbsoluteEdgesAt(FlatRedBall.Camera,System.Single)">
            <summary>
            Returns the four absolute edges of this camera in the form of (Vector2(left, bottom), Vector2(right, top)).
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.CameraExtensions.AbsoluteCornersAt(FlatRedBall.Camera,System.Single)">
            <summary>
            Returns the four absolute corners of this camera in vectors in the form of (topLeft, topRight, bottomLeft, bottomRight).
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.FloatExtensions">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FloatExtensions.SignDifference(System.Single,System.Single)">
            <summary>
            Determines the difference in signs between two floats.
            </summary>
            <returns>1 if the signs are the same, -1 otherwise.</returns>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapShapeRelative(FlatRedBall.Content.Math.Geometry.AxisAlignedRectangleSave,FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Maps a shape save into an shape, interpreting the save values as relative positions and overwriting the existing shape values.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapShapeRelative(FlatRedBall.Content.Math.Geometry.AxisAlignedCubeSave,FlatRedBall.Math.Geometry.AxisAlignedCube)">
            <summary>
            Maps a shape save into an shape, interpreting the save values as relative positions and overwriting the existing shape values.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapShapeRelative(FlatRedBall.Content.Polygon.PolygonSave,FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Maps a shape save into an shape, interpreting the save values as relative positions and overwriting the existing shape values.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapShapeRelative(FlatRedBall.Content.Math.Geometry.CircleSave,FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Maps a shape save into an shape, interpreting the save values as relative positions and overwriting the existing shape values.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapShapeRelative(FlatRedBall.Content.Math.Geometry.SphereSave,FlatRedBall.Math.Geometry.Sphere)">
            <summary>
            Maps a shape save into an shape, interpreting the save values as relative positions and overwriting the existing shape values.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapToNewShapeRelative(FlatRedBall.Content.Math.Geometry.AxisAlignedRectangleSave,FlatRedBall.PositionedObject)">
            <summary>
            Maps a shape save to a new instance of a shape, interpreting the save values as relative positions.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapToNewShapeRelative(FlatRedBall.Content.Math.Geometry.AxisAlignedCubeSave,FlatRedBall.PositionedObject)">
            <summary>
            Maps a shape save to a new instance of a shape, interpreting the save values as relative positions.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapToNewShapeRelative(FlatRedBall.Content.Polygon.PolygonSave,FlatRedBall.PositionedObject)">
            <summary>
            Maps a shape save to a new instance of a shape, interpreting the save values as relative positions.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapToNewShapeRelative(FlatRedBall.Content.Math.Geometry.CircleSave,FlatRedBall.PositionedObject)">
            <summary>
            Maps a shape save to a new instance of a shape, interpreting the save values as relative positions.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.MapToNewShapeRelative(FlatRedBall.Content.Math.Geometry.SphereSave,FlatRedBall.PositionedObject)">
            <summary>
            Maps a shape save to a new instance of a shape, interpreting the save values as relative positions.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.FrbShapeExtensions.SetShapesByName(FlatRedBall.Content.Math.Geometry.ShapeCollectionSave,FlatRedBall.Math.Geometry.ShapeCollection,System.String,FlatRedBall.PositionedObject)">
            <summary>
            Reads all shapes in '<paramref name="from"/>' with '<paramref name="name"/>' as their name and
              overwrites the lists in "<paramref name="to"/>' with the found shapes. All shapes' parents are set to
              '<paramref name="newParent"/>'. You may provide a null parent to not parent the shapes.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.I2DInputExtensions">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.I2DInputExtensions.Deconstruct(FlatRedBall.Input.I2DInput,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
            <summary>
            Allows deconstruction into (Vector2 position, Vector2 velocity, float magnitude)
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.I2DInputExtensions.GetNormalizedPositionOrZero(FlatRedBall.Input.I2DInput)">
            <summary>
            Returns the normalized position of this input using I2DInput's X and Y properties.
              Returns <see cref="P:Microsoft.Xna.Framework.Vector2.Zero"/> if magnitude is zero or if input is null.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.I2DInputExtensions.GetAngleOrZero(FlatRedBall.Input.I2DInput)">
            <summary>
            Returns the angle in radians of the input object, where 0 is to the right, rotating counterclockwise.
            Returns null if the X and Y values are 0 (meaning the input device is centered)
            </summary>
            <param name="instance">The I2DInput instance</param>
            <returns>The angle, or null if X and Y are 0</returns>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.MatrixExtensions">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.MatrixExtensions.Invert(Microsoft.Xna.Framework.Matrix)">
            <returns>This matrix's inverse, if it exists.</returns>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Deconstruct(FlatRedBall.Math.Geometry.Point,System.Double@,System.Double@)">
            <summary>
            Allows deconstruction into (double x, double y)
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Deconstruct(System.Nullable{FlatRedBall.Math.Geometry.Point},System.Double@,System.Double@)">
            <summary>
            Allows deconstruction into (double x, double y)
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Add(FlatRedBall.Math.Geometry.Point,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Add another point to this one per-component.
            </summary>
            <returns>A new Point of the form { <paramref name="input1"/>.X + <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X + <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Multiply(FlatRedBall.Math.Geometry.Point,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Multiply this point by another one per-component.
            </summary>
            <returns>A new Point of the form { <paramref name="input1"/>.X * <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X * <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Subtract(FlatRedBall.Math.Geometry.Point,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Subtract another point from this one per-component.
            </summary>
            <returns>A new Point of the form { <paramref name="input1"/>.X - <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X - <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Divide(FlatRedBall.Math.Geometry.Point,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Divide this point by another one per-component.
            </summary>
            <returns>A new Point of the form { <paramref name="input1"/>.X / <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X / <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Add(FlatRedBall.Math.Geometry.Point,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Add a vector to this point per-component.
            </summary>
            <returns>A new Point of the form { <paramref name="input1"/>.X + <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X + <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Multiply(FlatRedBall.Math.Geometry.Point,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Multiply this point by a vector per-component.
            </summary>
            <returns>A new Point of the form { <paramref name="input1"/>.X * <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X * <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Subtract(FlatRedBall.Math.Geometry.Point,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Subtract a vector from this point per-component.
            </summary>
            <returns>A new Point of the form { <paramref name="input1"/>.X - <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X - <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.PointExtensions.Divide(FlatRedBall.Math.Geometry.Point,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Divide this point by a vector per-component.
            </summary>
            <returns>A new Point of the form { <paramref name="input1"/>.X / <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X / <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.RandomExtensions.NextSign(System.Random)">
            <summary>
            Randomly returns 1 or -1.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.RectangleExtensions">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.RectangleExtensions.Deconstruct(Microsoft.Xna.Framework.Rectangle,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Allows deconstruction into (int x, int y, int width, int height)
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.RectangleExtensions.Deconstruct(System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Allows deconstruction into (int x, int y, int width, int height)
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.RectangleExtensions.ToVec2(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Returns the vector representation of a rectangle.
              This is the vector from the bottom left point to the top left point of the rectangle
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.StringExtensions">
            
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Deconstruct(System.Nullable{Microsoft.Xna.Framework.Vector2},System.Single@,System.Single@)">
            <summary>
            Allows deconstruction into (float x, float y)
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.FromAngleAndLength(System.Single,System.Single)">
            <summary>
            Returns a vector with at the given angle with the given length.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.GetVectorTo(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a vector that points from the point represented by <paramref name="from"/>
              to the point represented by <paramref name="to"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.ClampMagnitude(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Returns a vector that is the same as <paramref name="vec"/> except that its length is adjusted to be
              within the range from <paramref name="min"/> to <paramref name="max"/> if needed.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.ToVec3(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a dimension to a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector3"/> of the form { <paramref name="input"/>.X, <paramref name="input"/>.Y, <paramref name="z"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.ToVec4(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Adds two dimensions to a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector3"/> of the form
            { <paramref name="input"/>.X, <paramref name="input"/>.Y, <paramref name="z"/>, <paramref name="w"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.GetComponent(Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            Returns the component at the given index. 0 is X and 1 is Y.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.SetComponent(Microsoft.Xna.Framework.Vector2,System.Int32,System.Single)">
            <summary>
            Returns a new vector with the component at the given index set to the given value. 0 is X and 1 is Y.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.SetComponentMutate(Microsoft.Xna.Framework.Vector2@,System.Int32,System.Single)">
            <summary>
            Sets the given vector's component at the given index to the given value. Mutates original vector. 0 is X, 1 is Y.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.GetSlope(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the slope of this vector: Y/X
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.GetQuadrant(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns which quadrant this vector lies in. Top-right quadrant is 1, and they ascend counter-clockwise through 4.
              Vectors on the X or Y axis return 0.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.GetClosestPoint(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Returns the vector representation of the point in the given list
              which is closest to this vector representation of a point.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.GetCcwAngle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the angle of this vector where 0 is the X unit vector. Ranges from 0 to 2*pi.
              Returns <see cref="F:System.Single.NaN"/> if this vector is (0, 0) or if either component is not a number.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.GetClosestAngle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the angle of this vector where 0 is the X unit vector. Ranges from -pi to pi
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Extend(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Increases the magnitude of a vector by the specified amount without changing its direction and returns the result as a new vector.
              Does not mutate <paramref name="input"/>.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.ProjectOnto(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the projection of this vector onto a target vector.
              For a visualization of projection, see <a href="https://www.geogebra.org/m/XShfg9r8">here</a>.
            <br/>Value: proj_<paramref name="target"/> <paramref name="input"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Lerp(System.ValueTuple{Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2},System.Single)">
            <summary>
            Performs a linear interpolation between <paramref name="input.lerpFrom.lerpFrom"/> and <paramref name="input.lerpTo.lerpTo"/>.
              Wrapper for <see cref="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.PiecewiseLerp(System.ValueTuple{Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Vector2)">
            <summary>
            Performs linear interpolation from the first vector to the second vector on its components individually,
              using <paramref name="tValues"/>.X to lerp the X components and <paramref name="tValues"/>.Y to lerp the Y components.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Randomize(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Random)">
            <summary>
            Generates two random numbers greater than or equal to 0.0 and less than 1.0, then returns a copy of this vector whose
              components have each been multiplied by one of those numbers.
            <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided.
            <br/><br/>Common usage: <c>Vector2.One.Randomize()</c>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.RandomizeBetween(System.ValueTuple{Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2},System.Random)">
            <summary>
            Returns a new vector with random values between the two input vectors.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            Common usage: <c>(Vector2.Zero, Vector2.One).Randomize()</c> <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.RandomizeAngle(Microsoft.Xna.Framework.Vector2,System.Single,System.Random)">
            <summary>
            Returns a new vector with the same magnitude, but a random angle. By default, the new angle could be any direction.
              Providing a tolerance means that the new angle will be within that much in either direction from the current angle.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.RandomizeAngleBetween(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Random)">
            <summary>
            Returns a new vector with the same magnitude, but a random angle greater than or equal to
              <paramref name="min"/> and less than <paramref name="max"/>.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.RandomizeMagnitude(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Random)">
            <summary>
            Returns a new vector with the same angle, but a random and lesser magnitude. If <paramref name="canInvert"/> is true,
              the new vector also has a 50% chance to be pointing backward.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.RandomizeMagnitudeBetween(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Random)">
            <summary>
            Returns a new vector with the same angle, but a random magnitude greater than or equal to <paramref name="min"/>
              and less than <paramref name="max"/>.
              If <paramref name="canInvert"/> is true, the new vector also has a 50% chance to be pointing backward.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Applies a transformation matrix to a vector. Wrapper for <see cref="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)"/>.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Translate(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Translates a Vector2 by the specified amounts on the 2 axes.
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X + <paramref name="x"/>,
              <paramref name="input1"/>.Y + <paramref name="y"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Scale(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Scales a Vector2 by the specified amounts on the 2 axes.
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X * <paramref name="x"/>,
              <paramref name="input1"/>.Y * <paramref name="y"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.WithMagnitude(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Returns a new vector with the same direction but with the magnitude provided.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.WithAngle(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Returns a new vector with the same magnitude but at the angle provided.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.MutatePiecewise(Microsoft.Xna.Framework.Vector2,System.Func{System.Single,System.Single})">
            <summary>
            Applies a given func to each component of this vector and returns the result.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Right(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Moves this vector right the specified amount and returns the result.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Left(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Moves this vector left the specified amount and returns the result.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Up(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Moves this vector up the specified amount and returns the result.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Down(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Moves this vector down the specified amount and returns the result.
            </summary>
            <param name="inputVector"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Adds a Vector3 to this Vector2. The Z component of the Vector3 is ignored.
            </summary>
            <returns>A new Vector3 of the form { <paramref name="input1"/>.X + <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y + <paramref name="input2"/>.Y, <paramref name="input2"/>.Z }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Multiplies a Vector3 by this Vector2. The Z component of the Vector3 is ignored.
            </summary>
            <returns>A new Vector3 of the form { <paramref name="input1"/>.X * <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y * <paramref name="input2"/>.Y, <paramref name="input2"/>.Z }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Subtracts a Vector3 from this Vector2.  The Z component of the Vector3 is ignored.
            </summary>
            <returns>A new Vector3 of the form { <paramref name="input1"/>.X - <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y - <paramref name="input2"/>.Y, 0f - <paramref name="input2"/>.Z }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Divides this Vector2 by a Vector3. The Z component of the Vector3 is ignored.
            </summary>
            <returns>A new Vector3 of the form { <paramref name="input1"/>.X / <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y / <paramref name="input2"/>.Y, 1f / <paramref name="input2"/>.Z }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds another vector to this one per-component. Equivalent to vector + vector
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X + <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X + <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Multiplies (does not perform dot product or cross product) this vector by another one per-component.
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X * <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X * <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Subtracts another vector from this vector per-component. Equivalent to vector - vector
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X - <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X - <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Divides this vector by another one per-component.
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X / <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X / <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Add(Microsoft.Xna.Framework.Vector2,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Adds a point to this vector per-component.
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X + <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X + <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Multiply(Microsoft.Xna.Framework.Vector2,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Multiplies this vector by a point per-component.
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X * <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X * <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Subtract(Microsoft.Xna.Framework.Vector2,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Subtracts a point from this vector per-component.
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X - <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X - <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector2Extensions.Divide(Microsoft.Xna.Framework.Vector2,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Divides this vector by another one per-component.
            </summary>
            <returns>A new Vector2 of the form { <paramref name="input1"/>.X / <paramref name="input2"/>.Y,
              <paramref name="input1"/>.X / <paramref name="input2"/>.Y }</returns>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Deconstruct(System.Nullable{Microsoft.Xna.Framework.Vector3},System.Single@,System.Single@,System.Single@)">
            <summary>
            Allows deconstruction into (float x, float y, float z)
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.ToVec4(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Adds a dimension to a <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector3"/> of the form
            { <paramref name="input"/>.X, <paramref name="input"/>.Y, <paramref name="input"/>.Z, <paramref name="w"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.GetVectorTo(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns a vector that points from the point represented by <paramref name="from"/>
              to the point represented by <paramref name="to"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.ClampMagnitude(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Returns a vector that is the same as <paramref name="vec"/> except that its length is adjusted to be
              within the range from <paramref name="min"/> to <paramref name="max"/> if needed.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.GetComponent(Microsoft.Xna.Framework.Vector3,System.Int32)">
            <summary>
            Returns the component at the given index. 0 is X, 1 is Y, and 2 is Z.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.SetComponent(Microsoft.Xna.Framework.Vector3,System.Int32,System.Single)">
            <summary>
            Returns a new vector with the component at the given index set to the given value. 0 is X, 1 is Y, and 2 is Z.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.SetComponentMutate(Microsoft.Xna.Framework.Vector3@,System.Int32,System.Single)">
            <summary>
            Sets the given vector's component at the given index to the given value. Mutates original vector. 0 is X, 1 is Y, 2 is Z.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.XY(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Stuffs the X and Y components of this vector into the X and Y components of a vector, respectively.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.XZ(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Stuffs the X and Z components of this vector into the X and Y components of a vector, respectively.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.YZ(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Stuffs the Y and Z components of this vector into the X and Y components of a vector, respectively.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.ProjectOnto(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the projection of this vector onto a target vector.
              For a visualization of projection, see here: https://www.geogebra.org/m/XShfg9r8
            <remarks>proj_<paramref name="target"/> <paramref name="input"/></remarks>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Lerp(System.ValueTuple{Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3},System.Single)">
            <summary>
            Performs a linear interpolation between <paramref name="input.lerpFrom.lerpFrom"/> and <paramref name="input.lerpTo.lerpTo"/>.
              Wrapper for <see cref="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)"/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.PiecewiseLerp(System.ValueTuple{Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3)">
            <summary>
            Performs linear interpolation from the first vector to the second vector on its components individually,
              using <paramref name="tValues"/>.X to lerp the X components, <paramref name="tValues"/>.Y to lerp the Y components,
              and <paramref name="tValues"/>.Z to lerp the Z components.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Randomize(Microsoft.Xna.Framework.Vector3,System.Boolean,System.Random)">
            <summary>
            Generates two random numbers greater than or equal to 0.0 and less than 1.0, then returns a copy of this vector whose
              components have each been multiplied by one of those numbers.
            <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided.
            <br/><br/>Common usage: <c>Vector2.One.Randomize()</c>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.RandomizeBetween(System.ValueTuple{Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3},System.Random)">
            <summary>
            Returns a new vector with random values between the two input vectors.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            Common usage: <c>(Vector2.Zero, Vector2.One).Randomize()</c> <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.RandomizeAngle(Microsoft.Xna.Framework.Vector3,System.Single,System.Random)">
            <summary>
            Returns a new vector with the same magnitude, but a random angle. By default, the new angle could be any direction.
              Providing a tolerance means that the new angle will be within that much in either direction from the current angle.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.RandomizeAngleBetween(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Random)">
            <summary>
            Returns a new vector with the same magnitude, but a random angle greater than or equal to
              <paramref name="min"/> and less than <paramref name="max"/>.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.RandomizeMagnitude(Microsoft.Xna.Framework.Vector3,System.Boolean,System.Random)">
            <summary>
            Returns a new vector with the same angle, but a random and lesser magnitude. If <paramref name="canInvert"/> is true,
              the new vector also has a 50% chance to be pointing backward.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.RandomizeMagnitudeBetween(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Boolean,System.Random)">
            <summary>
            Returns a new vector with the same angle, but a random magnitude greater than or equal to <paramref name="min"/>
              and less than <paramref name="max"/>.
              If <paramref name="canInvert"/> is true, the new vector also has a 50% chance to be pointing backward.
              <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided. <br/>
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Applies a transformation matrix to a vector. Wrapper for <see cref="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)"/>.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Translate(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Translates a vector by the specified amounts on the 3 axes.
            </summary>
            <returns>A new Vector3 of the form { <paramref name="input1"/>.X + <paramref name="x"/>,
              <paramref name="input1"/>.Y + <paramref name="y"/>, <paramref name="input1"/>.Z + <paramref name="z"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Scale(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Scales this vector by the specified amounts on the 3 axes.
            </summary>
            <returns>A new Vector3 of the form { <paramref name="input1"/>.X * <paramref name="x"/>,
              <paramref name="input1"/>.Y * <paramref name="y"/>, <paramref name="input1"/>.Z * <paramref name="z"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.RotateX(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Rotates this vector by <paramref name="radians"/> about the X axis.
            </summary>
            <returns>A new Vector3 that has been rotated.</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.RotateY(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Rotates this vector by <paramref name="radians"/> about the Y axis.
            </summary>
            <returns>A new Vector3 that has been rotated.</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.RotateZ(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Rotates this vector by <paramref name="radians"/> about the Z axis.
            This is essentially the same as rotating this vector in 2D space, Z will be unaffected.
            </summary>
            <returns>A new Vector3 that has been rotated.</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.GetNormalized(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Normalizes a vector, i.e. sets this vector's magnitude to 0 while preserving its direction.
            </summary>
            <param name="input"></param>
            <returns>A Vector3 with magnitude 1 if the input vector's magnitude is nonzero. Returns the zero vector otherwise.</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.MutatePiecewise(Microsoft.Xna.Framework.Vector3,System.Func{System.Single,System.Single})">
            <summary>
            Applies a given func to each component of this vector and returns the result.
            </summary>
            <param name="inputVector"></param>
            <param name="mutator"></param>
            <returns></returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Right(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Moves this vector right the specified amount and returns the result.
            </summary>
            <param name="inputVector"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Left(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Moves this vector left the specified amount and returns the result.
            </summary>
            <param name="inputVector"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Up(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Moves this vector up the specified amount and returns the result.
            </summary>
            <param name="inputVector"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Down(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Moves this vector down the specified amount and returns the result.
            </summary>
            <param name="inputVector"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Backward(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Moves this vector backward the specified amount and returns the result.
            </summary>
            <param name="inputVector"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Forward(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Moves this vector forward the specified amount and returns the result.
            </summary>
            <param name="inputVector"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Adds another vector to this one per-component. Equivalent to vector + vector
            </summary>
            <returns>A new vector of the form { <paramref name="input1"/>.X + <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y + <paramref name="input2"/>.Y, <paramref name="input1"/>.Z + <paramref name="input2"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Multiplies (does not perform dot product or cross product) this vector by another one per-component.
            </summary>
            <returns>A new Vector3 of the form { <paramref name="input1"/>.X * <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y * <paramref name="input2"/>.Y, <paramref name="input1"/>.Z * <paramref name="input2"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Subtracts another vector from this vector per-component. Equivalent to vector - vector
            </summary>
            <returns>A new Vector3 of the form { <paramref name="input1"/>.X - <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y - <paramref name="input2"/>.Y, <paramref name="input1"/>.Z - <paramref name="input2"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Divides this vector by another one per-component.
            </summary>
            <returns>A new Vector3 of the form { <paramref name="input1"/>.X / <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y / <paramref name="input2"/>.Y, <paramref name="input1"/>.Z / <paramref name="input2"/> }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the distance between two points represented as vectors. Distance is never negative.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the squared distance between two points represented as vectors. Distance is never negative.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a 2-dimensional vector to this 3-dimensional vector.
              The Z component of the 2D vector is assumed to be the additive identity (0f).
            </summary>
            <returns>A new vector of the form: <br/> { <paramref name="input1"/>.X + <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y + <paramref name="input2"/>.Y, <paramref name="input1"/>.Z }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Multiples this 3-dimensional vector by a 2-dimensional vector.
              The Z component of the 2D vector is assumed to be the multiplicative identity (1f).
            </summary>
            <returns>A new Vector3 of the form: <br/> { <paramref name="input1"/>.X * <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y * <paramref name="input2"/>.Y, <paramref name="input1"/>.Z }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Subtracts a 2-dimensional vector from this 3-dimensional vector.
              The Z component of the 2D vector is assumed to be the additive identity (0f).
            </summary>
            <returns>A new Vector3 of the form: <br/> { <paramref name="input1"/>.X - <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y - <paramref name="input2"/>.Y, <paramref name="input1"/>.Z }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector3Extensions.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Divides this 3-dimensional vector by a 2-dimensional vector.
              The Z component of the 2D vector is assumed to be the multiplicative identity (1f).
            </summary>
            <returns>A new Vector3 of the form: <br/> { <paramref name="input1"/>.X / <paramref name="input2"/>.X,
              <paramref name="input1"/>.Y / <paramref name="input2"/>.Y, 1f / <paramref name="input1"/>.Z }</returns>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector4Extensions.GetComponent(Microsoft.Xna.Framework.Vector4,System.Int32)">
            <summary>
            Returns the component at the given index. 0 is X, 1 is Y, 2 is Z, and 3 is W.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector4Extensions.SetComponent(Microsoft.Xna.Framework.Vector4,System.Int32,System.Single)">
            <summary>
            Returns a new vector with the component at the given index set to the given value. 0 is X, 1 is Y, 2 is Z, and 3 is W.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector4Extensions.SetComponentMutate(Microsoft.Xna.Framework.Vector4@,System.Int32,System.Single)">
            <summary>
            Sets the given vector's component at the given index to the given value. Mutates original vector. 0 is X, 1 is Y, 2 is Z, and 3 is W.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.Extensions.Vector4Extensions.Randomize(Microsoft.Xna.Framework.Vector4,System.Boolean,System.Random)">
            <summary>
            Generates two random numbers greater than or equal to 0.0 and less than 1.0, then returns a copy of this vector whose
              components have each been multiplied by one of those numbers.
            <br/>You may optionally provide an existing <see cref="T:System.Random"/> instance.
              Random instance falls back to <see cref="P:System.Random.Shared"/> if none is provided.
            <br/><br/>Common usage: <c>Vector2.One.Randomize()</c>
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.NonStaticUtilities.ConsumableInput">
            <summary>
            Allows for a single instance of WasJustPressed to be read at during any frame of the continuous pressing of an input.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.ConsumableInput.#ctor(FlatRedBall.Input.IPressableInput)">
            <summary></summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.ConsumableInput.IsDown">
            <inheritdoc cref="P:FlatRedBall.Input.IPressableInput.IsDown"/>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.ConsumableInput.WasJustPressed">
            <inheritdoc cref="P:FlatRedBall.Input.IPressableInput.WasJustPressed"/>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.ConsumableInput.WasJustReleased">
            <inheritdoc cref="P:FlatRedBall.Input.IPressableInput.WasJustReleased"/>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.ConsumableInput.Activity">
            <summary>
            Must be called each frame before inputs are read.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Gated2DInput">
            <summary>
            Gates input direction to some number of discrete angles, starting with 0 radians.
              Typically used to force analog sticks to only move in 4 or 8 directions. 
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Gated2DInput.#ctor(FlatRedBall.Input.I2DInput,System.Int32)">
            <summary>
            Gates input direction to some number of discrete angles, starting with 0 radians.
              Typically used to force analog sticks to only move in 4 or 8 directions. 
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.InterpolationFunc">
            <summary>
            Function used to evaluate what the current value of the interpolator is.
              Should have the form: <code>T InterpolationFunc(T Value1, T Value2, float tValue)</code>
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.Value1">
            <summary>
            The value at the start of the interpolation
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.Value2">
            <summary>
            The value at the end of the interpolation
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.#ctor(`0,`0,System.Func{`0,`0,System.Single,`0})">
            
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.TValue">
            <summary>
            How far through the interpolation the interpolator is normalized from 0 to 1
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.CurrentValue">
            <summary>
            The evaluation of the interpolation function at the current t-value
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.IsFinished">
            <summary>
            Returns whether the interpolator has finished its duration.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.Update">
            <summary>
            Advances the interpolator using <see cref="P:FlatRedBall.TimeManager.SecondDifference"/>. Returns new current value.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.Reset">
            <summary>
            Sets the interpolator back to the zero state.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.NonStaticUtilities.DurationInterpolator`1">
            <summary>
            Handles interpolating a value over a given time period.
            </summary>
            <typeparam name="T">The type of the value being interpolated</typeparam>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.DurationInterpolator`1.TotalDuration">
            <summary>
            The total amount of time it will take this interpolator to finish
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.DurationInterpolator`1.#ctor(`0,`0,System.Double,System.Func{`0,`0,System.Single,`0})">
            
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.DurationInterpolator`1.ElapsedTime">
            <summary>
            The amount of time in seconds since the start of the interpolation. Clamped to [0, TotalDuration].
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.DurationInterpolator`1.RemainingDuration">
            <summary>
            The time in seconds before the interpolation ends
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.DurationInterpolator`1.NormalizedElapsedTime">
            <summary>
            The normalized elapsed time; input for the t value in the interpolation function.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.DurationInterpolator`1.TValue">
            <inheritdoc cref="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.TValue"/>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.DurationInterpolator`1.Update">
            <inheritdoc cref="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.Update"/>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.DurationInterpolator`1.Update(System.Double)">
            <summary>
            Advances the interpolator by the given amount of seconds. Returns new current value.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.SpeedInterpolator`1.TValue">
            <inheritdoc cref="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.TValue"/>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.SpeedInterpolator`1.Update">
            <inheritdoc cref="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Interpolator`1.Update"/>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.NonStaticUtilities.SpeedInterpolator`1.Update(System.Double)">
            <summary>
            Advances the interpolator by the given amount of seconds. Returns new current value.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.NonStaticUtilities.InterpolatorFactory">
            <summary>
            Creates common interpolators
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Rotation.TotalRadians">
            <summary>
            Full rotation value in radians, unbound.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Rotation.TotalDegrees">
            <summary>
            Full rotation value in degrees, unbound.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Rotation.NormalizedRadians">
            <summary>
            Rotation value in radians, normalized to be between 0 and 2 pi.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Rotation.NormalizedDegrees">
            <summary>
            Full rotation value in degrees, normalized to be between 0 and 360.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Rotation.CondensedRadians">
            <summary>
            Full rotation value in radians, normalized to be between -pi and pi.
            </summary>
        </member>
        <member name="P:ANLG.Utilities.FlatRedBall.NonStaticUtilities.Rotation.CondensedDegrees">
            <summary>
            Full rotation value in degrees, normalized to be between -180 and 180.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities.Regulate(System.Int32,System.Int32)">
            <summary>
            Takes a value <paramref name="x"/> and regulates it to the range 0 &lt;= <paramref name="x"/> &lt; <paramref name="m"/>
              such that it cycles through the range. Equivalent to a mathematical modulus.
              Will give equivalent values to the '%' operator for non-negative numbers.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities.Regulate(System.Single,System.Int32)">
            <summary><inheritdoc cref="M:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities.Regulate(System.Int32,System.Int32)"/></summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities.Regulate(System.Single,System.Single)">
            <summary><inheritdoc cref="M:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities.Regulate(System.Int32,System.Int32)"/></summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities.Regulate(System.Double,System.Int32)">
            <summary><inheritdoc cref="M:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities.Regulate(System.Int32,System.Int32)"/></summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities.Regulate(System.Double,System.Double)">
            <summary><inheritdoc cref="M:ANLG.Utilities.FlatRedBall.StaticUtilities.MathUtilities.Regulate(System.Int32,System.Int32)"/></summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms">
            <summary>
            Static methods for transforming argb spaces and argb values.
            Credit: Steven Coco (https://stackoverflow.com/a/55135336)
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.Brightness">
            <summary>
            Defines brightness levels.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.Alpha">
            <summary>
            Defines alpha levels.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.HintAlpha">
            <summary>
            Defines hint alpha levels.
            </summary>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.ColorTransformMode">
            <summary>
            Specifies a mode for argb transformations.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.RgBtoHsl(Microsoft.Xna.Framework.Color)">
            <summary>
            Converts RGB to HSL. Alpha is ignored.
            Output is: { H: [0, 360], S: [0, 1], L: [0, 1] }.
            </summary>
            <param name="color">The color to convert.</param>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.HsLtoRgb(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Converts HSL to RGB, with a specified output Alpha.
            Arguments are limited to the defined range:
            does not raise exceptions.
            </summary>
            <param name="h">Hue, must be in [0, 360].</param>
            <param name="s">Saturation, must be in [0, 1].</param>
            <param name="l">Luminance, must be in [0, 1].</param>
            <param name="a">Output Alpha, must be in [0, 255].</param>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.RgBtoHsb(Microsoft.Xna.Framework.Color)">
            <summary>
            Converts RGB to HSB. Alpha is ignored.
            Output is: { H: [0, 360], S: [0, 1], B: [0, 1] }.
            </summary>
            <param name="color">The color to convert.</param>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.HsBtoRgb(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Converts HSB to RGB, with a specified output Alpha.
            Arguments are limited to the defined range:
            does not raise exceptions.
            </summary>
            <param name="h">Hue, must be in [0, 360].</param>
            <param name="s">Saturation, must be in [0, 1].</param>
            <param name="b">Brightness, must be in [0, 1].</param>
            <param name="a">Output Alpha, must be in [0, 255].</param>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.TransformBrightness(Microsoft.Xna.Framework.Color,ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.ColorTransformMode,System.Double,System.Nullable{System.Byte})">
            <summary>
            Multiplies the Color's Luminance or Brightness by the argument;
            and optionally specifies the output Alpha.
            </summary>
            <param name="color">The color to transform.</param>
            <param name="colorTransformMode">Transform mode.</param>
            <param name="brightnessTransform">The transformation multiplier.</param>
            <param name="outputAlpha">Can optionally specify the Alpha to directly
            set on the output. If null, then the input <paramref name="color"/>
            Alpha is used.</param>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.TransformSaturationAndBrightness(Microsoft.Xna.Framework.Color,ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.ColorTransformMode,System.Double,System.Double,System.Nullable{System.Byte})">
            <summary>
            Multiplies the Color's Saturation, and Luminance or Brightness by the argument;
            and optionally specifies the output Alpha.
            </summary>
            <param name="color">The color to transform.</param>
            <param name="colorTransformMode">Transform mode.</param>
            <param name="saturationTransform">The transformation multiplier.</param>
            <param name="brightnessTransform">The transformation multiplier.</param>
            <param name="outputAlpha">Can optionally specify the Alpha to directly
            set on the output. If null, then the input <paramref name="color"/>
            Alpha is used.</param>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.SimpleColorTransforms.AlphaCombine(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Byte)">
            <summary>
            Creates a new Color by combining R, G, and B from each Color, scaled by the Color's Alpha.
            The R, G, B of each Color is scaled by the Color's Alpha. The R, G, B of both results is
            then added together and divided by 2. The values are limited to [0, 255].
            The Alpha of the output Color is specified; and is also limited to [0, 255]
            (does not raise exceptions).
            </summary>
            <param name="color1">Combined by scaling RGB by the A.</param>
            <param name="color2">Combined by scaling RGB by the A.</param>
            <param name="outputAlpha">The Alpha of the output Color.</param>
        </member>
        <member name="T:ANLG.Utilities.FlatRedBall.StaticUtilities.StringUtilities">
            
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.StringUtilities.FindLengthOfLargestWord(System.String)">
            <remarks>Uses <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> to differentiate between words.</remarks>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.StringUtilities.FindLineBreaks(System.String,System.Int32)">
            <summary>
            Returns which characters in a given string should become line breaks given the maximum number of characters for each line.
            </summary>
        </member>
        <member name="M:ANLG.Utilities.FlatRedBall.StaticUtilities.StringUtilities.FindCharacterTextBoxPositions(System.Int32,System.Boolean[])">
            <summary>
            Returns the zero-indexed column and row for each character of a string with the given length and line breaks.
            <br/>See <see cref="M:ANLG.Utilities.FlatRedBall.StaticUtilities.StringUtilities.FindLineBreaks(System.String,System.Int32)"/>
            </summary>
        </member>
    </members>
</doc>
